<?php

namespace App;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable implements MustVerifyEmail
{

    use Notifiable;
    protected $dates = [
        'updated_at',
        'created_at',
        'deleted_at',
        'transaction_date',
    ];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password', 'organisation_id', 'role_id', 'image', 'phone'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var arrayPol
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($user) {
            Config::create([
                'user_id'=>$user->id,
            ]);
        }
        );
    }

    public function organisation()
    {
        return $this->belongsTo(Organisation::class);
    }

    public function role()
    {
        return $this->belongsTo(Role::class);
    }

    public function todos()
    {
        return $this->hasMany(Todo::class);
    }
    public function config()
    {
        return $this->hasOne(Config::class);
    }
    public function scopeFilterDates($query)
    {
        $date = explode(" - ", request()->input('from-to', ""));

        if (count($date) != 2) {
            $date = [now()->subDays(29)->format("Y-m-d"), now()->addDays(29)->format("Y-m-d")];
        }

        return $query->whereBetween('created_at', $date);
    }

}
/*
 * users one role
 * many roles one user
 *
 * users one organisation
 * one organisation many users
 */